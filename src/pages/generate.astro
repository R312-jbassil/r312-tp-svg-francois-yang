---
import Layout from '../layouts/Layout.astro';
---
<Layout>
	<a href="/saveSVG" class="btn btn-secondary">Voir les SVG sauvegardés</a>	
    <div class="flex flex-col gap-8 p-8 max-w-4xl mx-auto">
	<!-- Zone de saisie du prompt utilisateur -->
	<div class="card bg-base-200 shadow-md p-6">
		<label class="label">
			<span class="label-text text-lg font-semibold">Entrez votre prompt :</span>
		</label>
	<textarea id="user-prompt" class="textarea textarea-bordered w-full min-h-[100px] mb-4" placeholder="Décrivez le SVG à générer..."></textarea>
	<button id="generate-button" class="btn btn-primary w-full">Générer</button>
	</div>

	<!-- Affichage du code généré -->
	<div class="card bg-base-100 shadow-md p-6">
		<label class="label">
			<span class="label-text text-lg font-semibold">Code SVG généré :</span>
		</label>
	<pre class="bg-base-200 rounded p-4 overflow-x-auto text-sm"><code id="svg-output"></code></pre>
	<button id="save-svg-button" class="btn btn-secondary w-full mt-4">Sauvegarder</button>
	</div>

	<!-- Affichage du SVG -->
	<div class="card bg-base-100 shadow-md p-6 flex flex-col items-center">
		<label class="label mb-2">
			<span class="label-text text-lg font-semibold">Aperçu du SVG :</span>
		</label>
	<div id="svg-container" class="bg-base-200 rounded p-4 flex items-center justify-center min-h-[120px] min-w-[120px]"></div>
	</div>
</div>
</Layout>

<script>
	//@ts-nocheck

	let lastGeneratedSVG = "";

	async function generateSVG(prompt) {
		console.log('Generating SVG for prompt:', prompt);
		const res = await fetch('/api/generateSVG', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ prompt }),
		});
		const data = await res.json();
		return data.svg;
	}

	async function handleSubmit() {
		let prompt = "";
		const promptElement = document.getElementById("user-prompt");
		prompt = promptElement ? promptElement.value : "";
		console.log('submitted: ', prompt); // message affiché sur votre console d'inspecteur dans le navigateur
		const svgContainer = document.getElementById("svg-container");
		let svgOutput = document.getElementById("svg-output");
		svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
		generateButton.disabled = true;
		const svgCode = await generateSVG(prompt);
		lastGeneratedSVG = svgCode;
		console.log('svgCode: ', svgCode);
		svgOutput.textContent = svgCode;
		// Affiche le SVG généré dans le conteneur
		svgContainer.innerHTML = svgCode || '<span class="text-error">Aucun SVG généré</span>';
		generateButton.disabled = false;
	}
	const generateButton = document.getElementById("generate-button");
	if (generateButton) {
		generateButton.addEventListener("click", handleSubmit);
	}

	// Ajout de la logique pour sauvegarder le SVG dans PocketBase
	const saveButton = document.getElementById("save-svg-button");
	if (saveButton) {
		saveButton.addEventListener("click", async () => {
			const promptElement = document.getElementById("user-prompt");
			const prompt = promptElement ? promptElement.value : "";
			const svg = lastGeneratedSVG;
			if (!svg || !prompt) {
				alert("Veuillez générer un SVG avant de sauvegarder.");
				return;
			}
			saveButton.disabled = true;
			saveButton.textContent = "Sauvegarde...";
			try {
				const res = await fetch('/api/saveSVG', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ prompt, svg }),
				});
				if (res.ok) {
					alert("SVG sauvegardé avec succès !");
				} else {
					alert("Erreur lors de la sauvegarde du SVG.");
				}
			} catch (e) {
				alert("Erreur réseau lors de la sauvegarde.");
			}
			saveButton.disabled = false;
			saveButton.textContent = "Sauvegarder";
		});
	}
</script>